* {
  box-sizing: border-box;
}

a {
  text-decoration: none;
  color: inherit;
}

ul {
  list-style: none;
  padding-left: 0;
  margin-left: 0;
}

body {
  margin: 0;
  background-color: #333;
  font-family: sans-serif;
  color: white;
}

.menu {
  display: flex;
  justify-content: center;
  gap: 1rem;
  padding: 1rem 2rem;
}

.menu__item--center {
  margin-left: auto;
  margin-right: auto;
}

/* .container {
  display: flex;
  align-items: center;
  height: 400px;
  height: 400px;
  border: 1px solid orange;
  gap: 25px;
}
 */

/* solo se le dan estilos a las etiquetas para aplicar estilos generales, si no siempre se dan clases */

/* flexbox es un modelo de layout. Contiene un eje principal y otro secundario: main axis(horizontal, de izquierda a derecha) y cross axis (vertical, de arriba abajo) */

/* justify content es para el eje principal. Align items es para el eje secundario */

/* flex-start: sitúa los elementos al inicio del eje principal, flex-end: sitúa los elementos al final del eje principal */

/* justify-content es para distribuir los elementos de manera proporcional */

/* space-evenly: deja exactamente el mismo espacio entre los elementos */

/* flex-direction: row, row-reverse, column, column-reverse */

/* align-items: el valor por defecto de align-items es stretch: estira los elementos para que ocupen todo el alto del contenedor. Puede ser flex-start */

/* Con flex no se deberían usar márgenes porque flexbox no los tiene en cuenta para el cálculo final */

/* Para dar espaciado hay que utilizar gap */

/* un margen auto crea un margen hasta el siguiente elemento */

/* margin-inline son los márgenes izquierdo y derecho */

/* margin-block son los márgenes de arriba y abajo */

/* .box {
  width: 100px;
  height: 100px;
  background-color: purple;
  font-size: 2rem;
  color: aliceblue;
  border: 1px solid steelblue;
} */
