/* EJERCICIOS ARRAYS M칄TODOS CALLBACK */

/* Crea una funci칩n que reciba un array de n칰meros y muestre por consola cada n칰mero multiplicado por su 칤ndice en el array */

const multipliedByIndex = numbers => {
  numbers.forEach((number, index) => {
    console.log(number * index);
  });
};

multipliedByIndex([2, 1, 3, 6, 5, 7]);

//
//
//

/* Crea una funci칩n que reciba un array de n칰meros y devuelva un array con cada n칰mero dividido por su 칤ndice en el array m치s 2, es decir index + 2 */

const dividedByIndex = numbers => {
  const result = numbers.map((number, index) => number / (index + 2));
  console.log(result);
};

dividedByIndex([3, 1, 8, 6, 5, 4]);

//
//
//

/* Crea una funci칩n que reciba un array de palabras y devuelva un array con las mismas palabras en may칰sculas. */

const wordsToUpperCase = words => {
  const result = words.map(word => word.toUpperCase());
  console.log(result);
};

wordsToUpperCase(['pantalla', 'ordenador', 'mesa']);

//
//
//

/* Crea una funci칩n que reciba un array de palabras y una letra. La funci칩n devolver치 un array con las palabras que comiencen por esa letra, si no hay mostrar치 un mensaje por consola diciendo que ninguna palabra coincide. */

// MI RESOLUCI칍N

/* 
const words = ['casa', 'coche', 'ventana'];
const letter = 'c';

const startsWithLetter = (words, letter) => {
  const result = words.filter(word => word.startsWith(letter));

  if (word.startsWith(letter)) {
    console.log(result);
  } else {
    console.log(`No hay ninguna palabra que empiece por la letra ${letter}`);
  }
};

startsWithLetter(words, letter); */

// RESOLUCI칍N EN CLASE

const startsWithLetter2 = (words, letter) => {
  const result = words.filter(word => word.startsWith(letter));

  if (result.length === 0) {
    console.log(`No hay ninguna palabra que empiece por la letra ${letter}`);
    return;
  }

  console.log(result);
};

startsWithLetter2(['casa', 'coche', 'ventana'], 'c');

//
//
//

/* A침ade a la funci칩n anterior lo necesario para que funcione independientemente de may칰sculas o min칰sculas. */

// RESOLUCI칍N EN CLASE

const startsWithLetter3 = (words, letter) => {
  const result = words.filter(word => word.toLowerCase().startsWith(letter.toLowerCase()));

  if (result.length === 0) {
    console.log(`No hay ninguna palabra que empiece por la letra ${letter}`);
    return;
  }

  console.log(result);
};

startsWithLetter3(['casa', 'coche', 'ventana'], 'C');

//
//
//

/* Crea una funci칩n que reciba un array de 10 n칰meros e imprima por consola la suma de todos los valores del array. */

const sum = numbers => {
  const result = numbers.reduce((acc, number) => acc + number);
  console.log(result);
};

sum([3, 1, 7, 6, 2, 4, 5, 9, 1, 6]);

//
//
//

/* Crea una funci칩n que reciba un array de 10 n칰meros, imprime por consola cada n칰mero, su cuadrado y su cubo en este formato:
  "N칰mero: 2 - Cuadrado: 4 - Cubo: 8". */

const numberSquareCube = numbers => {
  numbers.forEach(number => {
    const square = Math.pow(number, 2);
    const cube = Math.pow(number, 3);
    console.log(`N칰mero: ${number} - Cuadrado: ${square} - Cubo: ${cube}`);
  });
};

numberSquareCube([3, 1, 7, 6, 2, 4, 5, 9, 8, 10]);

//
//
//

/* Crea una funci칩n que reciba una palabra e imprima por consola esa palabra pero con las vocales en may칰scula. */

// Reduce solo funciona con arrays. Primero hay que convertir la palabra a un array utilizando split y luego ya se puede escribir reduce. Tambi칠n hay que especificar que empiece con string vac칤o porque si no, no tiene en cuenta la primera letra. El string vac칤o es el valor inicial del acumulador.

const vowelsInUpperCase = word => {
  const vowels = 'aeiouAEIOU치칠칤칩칰츼칄칈칍칔';

  const result = word.split('').reduce((acc, letter) => {
    if (vowels.includes(letter)) {
      return acc + letter.toUpperCase();
    } else {
      return acc + letter.toLowerCase();
    }
  }, '');

  console.log(result);
};

vowelsInUpperCase('televisi칩n');
vowelsInUpperCase('armario');

// RESOLUCI칍N EN CLASE FORMA CORTA

/* const vowelsInUpperCase = word => {
  const result = word.split('').reduce((acc, letter) => {
    if ('aeiou'.includes(letter)) return acc + letter.toUpperCase();
    else return acc + letter;
  }, '');

  console.log(result);
};

vowelsInUpperCase('television'); */

//
//
//

/* Crea una funci칩n que reciba un array de 10 n칰meros. Dentro de esa funci칩n crea dos arrays llamados even (pares) y odd (impares), despu칠s multiplica cada uno de los n칰meros del array recibido por un n칰mero aleatorio entre 1 y 10, si el resultado es par, gu치rdalo en el array de pares, si es impar, en el array de impares, al final, imprime los 3 arrays por consola. */

// MI RESOLUCI칍N

/* const evenOrOdd = numbers => {
  const even = [];
  const odd = [];

  const randomNumber = Math.floor(Math.random() * 11);

  const result = numbers.forEach(number => number * randomNumber);

  if (result % 2 === 0) {
    even.push(result);
  } else {
    odd.push(result);
  }

  console.log(numbers);
  console.log(even);
  console.log(odd);
};

evenOrOdd([3, 1, 7, 6, 2, 4, 5, 9, 8, 10]); */

// no se puede hacer con push porque push es imperativo y no es recomendable utilizarlo con callbacks

// RESOLUCI칍N EN CLASE

const evenOrOdd = numbers => {
  const randomNumber = Math.floor(Math.random() * 11);

  const arrayResult = numbers.map(number => number * randomNumber);

  const even = arrayResult.filter(number => number % 2 === 0);
  const odd = arrayResult.filter(number => number % 2 !== 0);

  console.log(numbers, even, odd);
};

evenOrOdd([3, 1, 7, 6, 2, 4, 5, 9, 8, 10]);

//
//
//

/* Crea una funci칩n que reciba un array con 5 palabras, debes imprimir por consola un array que contenga la inicial y la 칰ltima letra de cada palabra en may칰sculas, es decir, si nuestra funci칩n recibiera un array con ['hola', 'adios', 'gato', 'perro', 'casa'] deber치 imprimir por consola ['H', 'A', 'A', 'S', 'G', 'O', 'P','O', 'C', 'A']. Si te quedas atascado puedes investigar la funci칩n flatMap() y flat() */

// MI RESOLUCI칍N

/* const firstAndLastLetterInUpperCase = words => {
  const result = words.flatMap(word => {
    const firstLetter = word.charAt(0).toUpperCase();
    const lastLetter = word.charAt(word.length - 1).toUpperCase();
  });

  console.log(result);
};

firstAndLastLetterInUpperCase(['hola', 'adios', 'gato', 'perro', 'casa']); */

// RESOLUCI칍N EN CLASE

const firstAndLastLetterInUpperCase = words => {
  const result = words.flatMap(word => {
    return [word.charAt(0).toUpperCase(), word.charAt(word.length - 1).toUpperCase()];
  });

  console.log(result);
};

firstAndLastLetterInUpperCase(['hola', 'adios', 'gato', 'perro', 'casa']);

//
//
//

/* Crea una funci칩n que reciba un array de 10 n칰meros y te diga si alguno es mayor de 5. */

// MI RESOLUCI칍N

/* const higherThan5 = numbers => {
  numbers.forEach(number => {
    if (number > 5) {
      console.log(`El n칰mero ${number} es mayor de 5`);
    } else if (number === 5) {
      console.log(`El n칰mero ${number} es 5`);
    } else {
      console.log(`El n칰mero ${number} es menor de 5`);
    }
  });
};

higherThan5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); */

// RESOLUCI칍N EN CLASE
// Hay que usar some

const higherThan5 = numbers => {
  const result = numbers.some(number => number > 5);
  console.log(result);
};

higherThan5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

//
//
//

/* Crea una funci칩n que reciba un array de 5 palabras y un n칰mero y te devuelva un array con las palabras que tienen esa longitud, por ejemplo si le envias (['hola', 'adios', 'gato', 'perro', 'casa'], 4), te devolver치 un array con ['hola', 'gato', 'casa'] */

const wordsWithLength = (words, length) => {
  const result = words.filter(word => word.length === length);
  console.log(result);
};

wordsWithLength(['hola', 'adios', 'gato', 'perro', 'casa'], 4);

//
//
//

/* Crea una funci칩n que reciba un array de n칰meros y un n칰mero y te devuelva un array con los n칰meros que sean divisores de ese n칰mero */

const array = [1, 2, 3, 4, 5];
const divisor = 2;

const divisorNumbers = (array, divisor) => {
  const result = array.filter(number => number % divisor === 0);
  console.log(result);
};

divisorNumbers(array, divisor);

//
//
//

/* Crea una funci칩n que reciba este array y te devuelva s칩lo los usuarios cuya edad sea menor de 30. */

const array2 = [
  { name: 'John', age: 25 },
  { name: 'Jane', age: 30 },
  { name: 'Bob', age: 20 }
];

const under30 = array2 => {
  const result = array2.filter(user => user.age < 30);
  console.log(result);
};

under30(array2);

//
//
//

/* Crea una funci칩n que reciba un array relleno con n칰meros y te diga si todos son pares o no. */

const allEvenOrNot = numbers => {
  const result = numbers.every(number => number % 2 === 0);
  console.log(result);
};

allEvenOrNot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
allEvenOrNot([2, 4, 6, 8, 10]);

//
//
//

/* Crea una funci칩n que reciba un array de 5 palabras y las ordene en base a su longitud, de menor a mayor. */

const shortestToLongest = words => {
  const result = words.sort((a, b) => a.length - b.length);

  console.log(result);
};

shortestToLongest(['vaso', 'monedero', 'l치piz', 'papel', 'rotulador']);

//
//
//

/* Crea una funci칩n que reciba una palabra e imprima la misma palabra en orden inverso conservando las may칰sculas y las min칰sculas. Si recibe "Mariposas" deber치 imprimir "sasopiraM". No se puede usar reverse() 游땕 (investiga la funci칩n reduceRight) */

const reverseWord = word => {
  const result = word.split('').reduceRight((acc, letter) => acc + letter);
  console.log(result);
};

reverseWord('Mariposas');

//
//
//

// RETOS

/* Crea una funci칩n que reciba un array de 5 n칰meros de 2 d칤gitos. La funci칩n debe ser capaz de sumar los d칤gitos de cada n칰mero, es decir si yo le env칤o [21, 34, 87, 10, 28] la funci칩n tendr치 que ser capaz de devolverme un array con [3, 7, 15, 1, 10] */

/* const sumDigits = numbers => {
  const result = numbers.map => {
    const stringNumbers = String(number);
    const sum = stringNumbers
  }
  console.log(result);
};

sumDigits([21, 34, 87, 10, 28]); */

// RESOLUCI칍N EN CLASE

const sumDigits = numbers => {
  const sumArray = numbers.map(number => {
    const stringNumbers = String(number);
    const sum = stringNumbers.split('').reduce((acc, number) => acc + Number(number), 0);
    return sum;
  });
  console.log(sumArray);
};

sumDigits([21, 34, 87, 10, 28]);

//
//
//

/* Utilizando el array que te dejo a continuaci칩n, resuelve estos dos retos. */

const users = [
  {
    id: 'user001',
    name: 'Juan',
    surname: 'P칠rez',
    age: 30
  },
  {
    id: 'user002',
    name: 'Mar칤a',
    surname: 'Gonz치lez',
    age: 25
  },
  {
    id: 'user003',
    name: 'Pedro',
    surname: 'S치nchez',
    age: 35
  },
  {
    id: 'user004',
    name: 'Ana',
    surname: 'Mart칤nez',
    age: 28
  },
  {
    id: 'user005',
    name: 'Luis',
    surname: 'L칩pez',
    age: 40
  }
];

/* - Crea una funci칩n que reciba un criterio de ordenaci칩n y ordene el array en base a ese criterio. Puede ser el nombre, el apellido o la edad. */

// RESOLUCI칍N EN CLASE

const orderArrayByCondition = condition => {
  users.sort((a, b) => a[condition] - b[condition]);
  console.log(users);
};

orderArrayByCondition('name');
orderArrayByCondition('surname');
orderArrayByCondition('age');

/* - Crea una funci칩n que reciba un id de usuario y borre ese usuario del array. */

// RESOLUCI칍N EN CLASE

const deleteUser = id => {
  const result = users.filter(user => user.id !== id);
  console.log(result);
};

deleteUser('user005');
